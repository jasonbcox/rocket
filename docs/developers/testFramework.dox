/*! \page testFramework Test Framework Design and Specification

## Main Features
The Test Framework is not strictly its own module, but it needs to adhere to some design standards in order to keep the testing process as simple and smooth as possible.  The purpose of the Test Framework is to ensure that changes to the code do not damage existing functionality.  Unit tests are run before each build and if they fail, the build will not continue.

## Top Level
### main.cpp
main.cpp automagically calls all unit tests in all modules as they build.  Do not edit this file unless features need to be added that are out of the scope of individual unit tests.

### UnitTest.h/.cpp
The base class for all unit tests is defined here as well as the unit testing macros.  If you find yourself using the same type of check over and over, consider adding that check as a unit test macro in UnitTest.h.

## Module Level
### CMakeLists.txt
Every module must have unit tests, so each cmake file will have a secondary project dedicated to unit tests.  To add a unit test project to a new cmake file, follow this format:
\code
project( ModuleName_UnitTests )

set( ModuleName_UnitTests_Sources
	UnitTest_file1.cpp
	UnitTest_file2.cpp
	UnitTest_ect.cpp
)

add_test ( ModuleName_UnitTests ${ModuleName_UnitTests_Sources} )
target_link_libraries( ModuleName_UnitTests ModuleProjectName )
\endcode
Where add_test is a cmake macro defined at the top level.  It generates an executable that runs the unit tests for that particular module.

### UnitTest_*.cpp
Place all unit tests within files using the naming format UnitTest_*.cpp where * is typically the class name and/or feature you are testing.  All UnitTest_*.cpp files are to be located at the top level directory of each module that corresponds with those tests.

*/
